version: '3.8'

services:
  # Discovery Engine Frontend
  discovery-engine:
    build:
      context: ./DE
      dockerfile: Dockerfile
    ports:
      - "5173:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api/v1
      - VITE_GRAPH_WS_URL=ws://localhost:8000/ws
      - VITE_ENABLE_ANALYTICS=false
    depends_on:
      - backend
    networks:
      - rde-network
    restart: unless-stopped

  # Web Platform
  web-platform:
    build:
      context: ./website_explore_the_unknown
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_SITE_URL=http://localhost:3000
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=change-this-in-production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/website
    depends_on:
      - backend
      - postgres
    networks:
      - rde-network
    restart: unless-stopped

  # ResNEI Backend
  backend:
    build:
      context: ./resnei
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-change-in-production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/resnei
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
    networks:
      - rde-network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./resnei
      dockerfile: Dockerfile
    command: celery -A resnei worker --loglevel=info --concurrency=2
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-change-in-production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/resnei
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    volumes:
      - media_files:/app/media
    networks:
      - rde-network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ./resnei
      dockerfile: Dockerfile
    command: celery -A resnei beat --loglevel=info
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-change-in-production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/resnei
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    volumes:
      - media_files:/app/media
    networks:
      - rde-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=resnei
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=resnei,website
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
    ports:
      - "5432:5432"
    networks:
      - rde-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Background Tasks
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rde-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
      - static_files:/usr/share/nginx/html/static
      - media_files:/usr/share/nginx/html/media
    depends_on:
      - discovery-engine
      - web-platform
      - backend
    networks:
      - rde-network
    restart: unless-stopped

  # ElasticSearch for Advanced Search (Optional)
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - rde-network
    restart: unless-stopped
    profiles:
      - full

  # Kibana for Elasticsearch Management (Optional)
  kibana:
    image: kibana:8.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - rde-network
    restart: unless-stopped
    profiles:
      - full

  # MinIO for S3-Compatible Object Storage (Optional)
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - rde-network
    restart: unless-stopped
    profiles:
      - full

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - rde-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Metrics Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - rde-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  rde-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 